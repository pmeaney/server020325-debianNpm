services:
  nginx-proxy-mgr-020325:
    image: "jc21/nginx-proxy-manager:latest"
    container_name: nginx-proxy-mgr-020325
    restart: unless-stopped
    ports:
      # These ports are in format <host-port>:<container-port>
      - "80:80" # Public HTTP Port
      - "443:443" # Public HTTPS Port
      - "81:81" # Admin Web Port
      # Add any other Stream port you want to expose
      # - '21:21' # FTP
    environment:
      # Postgres parameters:
      DB_POSTGRES_HOST: "postgres-for-nginx-proxy-mgr-020325"
      DB_POSTGRES_PORT: "5432"
      DB_POSTGRES_USER: "npm"
      DB_POSTGRES_PASSWORD: "npmpass"
      DB_POSTGRES_NAME: "npm"
      # Uncomment this if IPv6 is not enabled on your host
      # DISABLE_IPV6: 'true'
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt
    depends_on:
      - postgres-for-nginx-proxy-mgr-020325
    networks:
      - main-network--npm020325

  postgres-for-nginx-proxy-mgr-020325:
    image: postgres:17
    container_name: postgres-for-nginx-proxy-mgr-020325
    environment:
      POSTGRES_USER: "npm"
      POSTGRES_PASSWORD: "npmpass"
      POSTGRES_DB: "npm"
    volumes:
      - ./postgres:/var/lib/postgresql/data
    networks:
      - main-network--npm020325

networks:
  main-network--npm020325:
    name: main-network--npm020325
    # With external: true, Docker Compose expects the network to exist already and will fail if it doesn't
    # Without external: true, Docker Compose will automatically create the network when you run docker-compose up
    # And by default, Docker uses the bridge driver (which is Docker's default network type), so we don't need to specify it.
